# Fonction pour lire un fichier FASTA et renvoyer un dictionnaire de sequences
def read_fasta(fasta_file):
    sequences = {}  # Initialisation d'un dictionnaire pour stocker les sequences
    current_key = None  # Variable pour stocker la cle actuelle (identifiant de la sequence)

    # Ouvre le fichier FASTA en mode lecture
    with open(fasta_file, 'r') as file:
        # Parcourt chaque ligne du fichier
        for line in file:
            line = line.strip()  # Supprime les espaces en debut et fin de ligne
            if line.startswith('>'):
                current_key = line[1:]  # Recupere l'identifiant en enlevant le caractere '>'
                sequences[current_key] = ''  # Initialise la sequence pour la cle actuelle
            else:
                sequences[current_key] += line  # Ajoute la ligne a la sequence existante

    return sequences  # Retourne le dictionnaire de sequences


# Fonction pour trouver les proteines qui correspondent a un peptide dans un fichier FASTA
def match_id(peptide, fasta_file):
    proteins = []  # Initialisation d'une liste pour stocker les proteines correspondantes

    # Ouvre le fichier FASTA en mode lecture
    with open(fasta_file, 'r') as file: #le 'r' correspond au droits de l'auteur a la lecture (r w x)
        current_protein = None  # Variable pour stocker l'identifiant de la proteine actuelle

        # Parcourt chaque ligne du fichier
        for line in file:
            line = line.strip()  # Supprime les espaces en debut et fin de ligne
            if line.startswith('>'):
                current_protein = line[1:]  # Recupere l'identifiant en enlevant le caractere '>'
            else:
                overlap_len = overlap(peptide, line)  # Calcule la longueur de l'overlap
                if overlap_len > 0:
                    proteins.append(current_protein)  # Ajoute l'identifiant de la prot√©ine correspondante

    return proteins if proteins else None  # Retourne la liste d'identifiants de prot√©ines ou None si vide


# Fonction pour calculer la longueur de l'overlap entre deux s√©quences
#regarder le chevauchement entre les peptides r1 et r2 (le chevauchement a droite pour r1 et a gauche pour r2)
#il est mieux de creer une autre fonnction qui fait l'inverse de la fonction overlap mais en l'utilisant 
def overlap(r1, r2):
    max_overlap = 0

    for i in range(1, min(len(r1), len(r2)) + 1):
        if r1.endswith(r2[:i]):
            max_overlap = i

    return max_overlap


# Fonction pour assembler des peptides ayant un overlap suffisant
def assembly_peptides(peptide_file, overlap_min):
    peptides = read_fasta(peptide_file)  # Recupere les peptides du fichier FASTA
    assemblies = []  # Initialisation d'une liste pour stocker les assemblages
    
    while peptides:
        current_peptide = peptides.popitem()  # Prend le dernier element du dictionnaire de peptide
        assembly = extend_assembly(current_peptide, peptides, overlap_min)  # etend l'assemblage(cherche les chevauchements pour creer un super peptide)
        assemblies.append(assembly)  # Ajoute l'assemblage a la liste

    return assemblies  # Retourne la liste des assemblages


# Fonction pour etendre un assemblage de peptides
def extend_assembly(current_peptide, peptides, overlap_min):
    assembly = current_peptide[1]  # Recupere la sequence du peptide actuel
    peptides = list(peptides.items())  # Convertit le dictionnaire en liste pour optimiser l'accès

    while True:
        extended = False  # Indicateur pour savoir si l'assemblage a ete etendu
        for key, value in peptides:
            left_overlap = overlap(value, assembly)  # Calcule l'overlap a gauche
            right_overlap = overlap(assembly, value)  # Calcule l'overlap a droite

            if left_overlap >= overlap_min:
                assembly = value + assembly[left_overlap:]  # etend a gauche
                peptides.remove((key, value))  # Retire le peptide utilise de la liste
                extended = True
                break
            elif right_overlap >= overlap_min:
                assembly = assembly + value[right_overlap:]  # etend a droite
                peptides.remove((key, value))  # Retire le peptide utilise de la liste
                extended = True
                break

        if not extended:
            break

    return assembly  # Retourne la sequence assemblee

# Fonction pour trouver un ensemble unique de peptides correspondant a des proteines
def unique_match_set(peptide_file, db_file):
    peptides = read_fasta(peptide_file)
    proteins_count = {}

    for peptide_seq in peptides.values():
        matched_proteins = match_id(peptide_seq, db_file)

        if matched_proteins:
            for protein in matched_proteins:
                proteins_count[protein] = proteins_count.get(protein, 0) + 1

    result_set = set()
    for peptide_key, peptide_seq in peptides.items():
        if match_id(peptide_seq, db_file) and all(proteins_count[protein] == 1 for protein in match_id(peptide_seq, db_file)):
            result_set.add(peptide_key)

    return len(result_set), result_set


#programme principal
# Execution du script si c'est le fichier principal


if __name__ == "__main__":
    peptide_file = "small_peptides.fa"
    db_file = "human_blood_proteome.fa"
    overlap_min = 3  # Définir la longueur minimale d'overlap souhaitée

    # Obtenir le résultat des protéines uniques
    unique_proteins_count, unique_proteins_set = unique_match_set(peptide_file, db_file)

    # Obtenir les résultats des peptides assemblés
    assemblies = assembly_peptides(peptide_file, overlap_min)

    # Écrire les résultats dans un fichier
    with open("resultats.txt", "w") as result_file:
        result_file.write(f"Nombre de protéines uniques : {unique_proteins_count}\n")
        result_file.write("Protéines uniques :\n")
        for protein in unique_proteins_set:
            result_file.write(f"{protein}\n")

        result_file.write("\nPeptides assemblés :\n")
        for i, assembly in enumerate(assemblies):
            result_file.write(f"{i + 1}: {assembly}\n")

